let wasm = require('dessert-markdown-core');

getOptions = function () {
    return wasm.get_options();
}

getOption = function (key) {
    return wasm.get_option(key);
}

setOption = function (key, value) {
    wasm.set_option(key, value);
}

function getDefaultOptions(simple) {
    'use strict';
    var defaultOptions = {
        noHeaderId: {
            defaultValue: false,
            describe: 'Turn on/off generated header id',
            type: 'boolean'
        },
        prefixHeaderId: {
            defaultValue: false,
            describe: 'Add a prefix to the generated header ids. Passing a string will prefix that string to the header id. Setting to true will add a generic \'section-\' prefix',
            type: 'string'
        },
        rawPrefixHeaderId: {
            defaultValue: false,
            describe: 'Setting this option to true will prevent showdown from modifying the prefix. This might result in malformed IDs (if, for instance, the " char is used in the prefix)',
            type: 'boolean'
        },
        ghCompatibleHeaderId: {
            defaultValue: false,
            describe: 'Generate header ids compatible with github style (spaces are replaced with dashes, a bunch of non alphanumeric chars are removed)',
            type: 'boolean'
        },
        rawHeaderId: {
            defaultValue: false,
            describe: 'Remove only spaces, \' and " from generated header ids (including prefixes), replacing them with dashes (-). WARNING: This might result in malformed ids',
            type: 'boolean'
        },
        headerLevelStart: {
            defaultValue: false,
            describe: 'The header blocks level start',
            type: 'integer'
        },
        literalMidWordAsterisks: {
            defaultValue: false,
            describe: 'Parse midword asterisks as literal asterisks',
            type: 'boolean'
        },
        strikethrough: {
            defaultValue: false,
            describe: 'Turn on/off strikethrough support',
            type: 'boolean'
        },
        tables: {
            defaultValue: false,
            describe: 'Turn on/off tables support',
            type: 'boolean'
        },
        tasklists: {
            defaultValue: false,
            describe: 'Turn on/off GFM tasklist support',
            type: 'boolean'
        },
        simpleLineBreaks: {
            defaultValue: false,
            description: 'Parses simple line breaks as <br> (GFM Style)',
            type: 'boolean'
        },
        ghMentions: {
            defaultValue: false,
            description: 'Enables github @mentions',
            type: 'boolean'
        },
        requireSpaceBeforeHeadingText: {
            defaultValue: false,
            description: 'Makes adding a space between `#` and the header text mandatory (GFM Style)',
            type: 'boolean'
        },
        ghMentionsLink: {
            defaultValue: 'https://github.com/{u}',
            description: 'Changes the link generated by @mentions. Only applies if ghMentions option is enabled.',
            type: 'string'
        },
        openLinksInNewWindow: {
            defaultValue: false,
            description: 'Open all links in new windows',
            type: 'boolean'
        },
        emoji: {
            defaultValue: false,
            description: 'Enable emoji support. Ex: `this is a :smile: emoji`',
            type: 'boolean'
        },
    }

    if (simple === false) {
        return JSON.parse(JSON.stringify(defaultOptions));
    }
    var ret = {};
    for (var opt in defaultOptions) {
        if (defaultOptions.hasOwnProperty(opt)) {
            ret[opt] = defaultOptions[opt].defaultValue;
        }
    }
    return ret;
}

Converter = function (converterOptions) {
    'use strict';
    var options = {};

    _constructor();

    function _constructor() {
        converterOptions = converterOptions || {};

        var globalOptions = wasm.get_options();

        for (var gOpt in globalOptions) {
            if (globalOptions.hasOwnProperty(gOpt)) {
                options[gOpt] = globalOptions[gOpt];
            }
        }

        if (typeof converterOptions === 'object') {
            for (var opt in converterOptions) {
                if (converterOptions.hasOwnProperty(opt)) {
                    options[opt] = converterOptions[opt];
                }
            }
        } else {
            throw Error('Converter expects the passed parameter to be an object, but ' + typeof converterOptions + ' was passed instead.');
        }
    }

    this.makeHtml = function (text) {
        return wasm.make_html(text, options);
    }

    this.getOptions = function () {
        return options;
    }

    this.getOption = function (key) {
        return options[key];
    };

    this.setOption = function (key, value) {
        options[key] = value;
    };
};

module.exports = {
    Converter: Converter,
    getOption,
    getOptions,
    setOption,
    getDefaultOptions
}